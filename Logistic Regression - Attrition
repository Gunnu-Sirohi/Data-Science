# Brief Explanation of below code
# 1) all files loaded
# 2) General , Employee survey and Manager survey merged into employee data frame
# 3) Employee Data frame - Data Cleaning (Invalid , duplicate , NA and Outliers)
# 4) Employee DF data prepration - Levels , Dummy Variables 
# 5) In Out Files - Data Cleaning (Invalid , duplicate , NA and Outliers)
# 6) In and Out DF data prepration -  Derived Variable - Avg Working Hours
# 7) Avg working hours mergerd with final data frame
# 8) Standardisation of int columns
# 9) check corelation 
# 10) Seperate Train and Test Data
# 11) Model Bulding and Variable Selection
# 12) Model Validation : Confusion Matrix , KS Static and Lift and Gain

#################--- set working Directory to file location -----######################

#################------------Load required Libraries-------------######################

#install.packages("skimr")
#install.packages("dplyr")
#install.packages("e1071")
#install.packages("ROCR")
library(plyr)
library(skimr)
library(dplyr)
library(reshape2)
library("MASS")
library(car)
library(ROCR)
library(caret)
library(ggplot2)
library(cowplot)
library(caTools)
library(e1071)


#####################################----------------Load Data---------------################################################################################

general<-read.csv("general_data.csv",stringsAsFactors = FALSE)

emp_survey<-read.csv("employee_survey_data.csv" , stringsAsFactors =  FALSE)

manager_survey<-read.csv("manager_survey_data.csv" , stringsAsFactors = FALSE)


InTime <- read.csv("in_time.csv",stringsAsFactors = FALSE)
OutTime <- read.csv("out_time.csv",stringsAsFactors = FALSE)

#######################################------- Merge general , emp_survey and manager_survey ---###########################################################

#----- Check difference in id count in three dataframes before merging --------#

setdiff(general$EmployeeID,emp_survey$EmployeeID)      # same no of ids

setdiff(general$EmployeeID,manager_survey$EmployeeID)  # same no of ids

setdiff(emp_survey$EmployeeID,manager_survey$EmployeeID)  # same no of ids

#--------------- Combine three df into one -----------------------------------#

employee<-merge(general,emp_survey,by.x = "EmployeeID" , by.y = "EmployeeID")

employee<-merge(employee,manager_survey,by.x = "EmployeeID" , by.y = "EmployeeID")


#---------------- Int to Factor Conversion ------------------------------------------------------#

employee$Attrition<-as.factor(employee$Attrition)
employee$Gender<-as.factor(employee$Gender)
employee$Education<-as.factor(employee$Education)
employee$JobLevel<-as.factor(employee$JobLevel)
employee$StockOptionLevel<-as.factor(employee$StockOptionLevel)
employee$EnvironmentSatisfaction<-as.factor(employee$EnvironmentSatisfaction)
employee$JobSatisfaction<-as.factor(employee$JobSatisfaction)
employee$WorkLifeBalance<-as.factor(employee$WorkLifeBalance)
employee$JobInvolvement<-as.factor(employee$JobInvolvement)
employee$PerformanceRating<-as.factor(employee$PerformanceRating)



#######################################---------- EXPLORATORY DATA ANALYSIS Part - 1 ----###################################################################
str(employee)

skim(employee)


#char column Over18 has only one unique value
#performance rating column has only 2 unique values instead of 4
#employee count , standardhours also just have one unique values
#Enviroment satisfaction has 25 NA
#Job satisfaction has 20 NA
#Work life balance has 38 NA
#Number of companies worked has 19 NA
#Total working years has 9 NA


#######################################-----DATA CLEANING - employee dataframe(general + Survey file)----######################################################

#------------------ Invalid char/factor values ------------------------------#

#1) check distinct value of char variables 
char_var<-employee[, sapply(employee, class) %in% c('character')]
distinct_char<-apply(char_var,2,function(x) unique(x))
distinct_char 

# No invalid value(spelling/case)

#2) check which columns have only one value
unique_value_count<-apply(employee,2,function(x) length(unique(x)))

# EmployeeCount,StandardHours and Over18 have just one unique value 1,8 and Y respectively
# As they will have no effect on model and cannot be used to derive any metrics 
# hence removing them

employee$EmployeeCount<-NULL
employee$StandardHours<-NULL
employee$Over18<-NULL

#3) check different levles of factor variables
factor_var<-employee[, sapply(employee, class) %in% c('factor')]
distinct_factor<-apply(factor_var,2,function(x) unique(x))
distinct_factor

# performance rate has only two values 3 and 4
# it is highly unlikely that out of 4000+ employee no one is rated "Good" or "Bad"
# Therefore this is a data quality issue
# As we cannot impute correct vlaues , we will delete this column

employee$PerformanceRating<- NULL

#--------------------- De Duplicate Rows  -----------------------------------#

employee<-unique(employee) # no duplicates

#-------------------- Missing value  ----------------------------------------#

column_with_NA<-colnames(employee)[colSums(is.na(employee)) > 0]

no_of_NA<-sapply(employee, function(y) sum(length(which(is.na(y))))) 
no_of_NA

# NumCompaniesworked : 19         , 19/4410 = .43 %
# TotalworkingYears  : 9          ,  9/4410 = .20 %
# EnviromentSatisfaction : 25     , 25/4410 = .56 %
# Jobsatisfaction    : 20         , 20/4410 = .45 %
# WorklifeBalance    : 38         , 38/4410 = .86 %

# Total Null rows    : 111        , 111/4410= 2.5%


#Impute NumCompaniesworked using TotalworkingYears and YearsAtCompany
# when TotalworkingYears = YearsAtCompany then NumCompaniesworked = 1

sum(length(which(is.na(employee$NumCompaniesWorked)& employee$TotalWorkingYears==employee$YearsAtCompany))) # 5 such records
employee$NumCompaniesWorked<-ifelse(is.na(employee$NumCompaniesWorked) & employee$TotalWorkingYears==employee$YearsAtCompany,1, employee$NumCompaniesWorked)


# There can be multiple fators influencing EnvironmentSatisfaction,JobSatisfaction and WorkLifeBalance
# There is no definite way to impute satisfaction level using these variables  
# Also the number of missing values are "INSIGNIFICANT" , Hence delete these rows

employee<-na.omit(employee)

#------------------ Outlier treatment ---------------------------------#

# 1) Age 
boxplot(employee$Age)$out
quantile(employee$Age,seq(0,1,0.01)) # No Outlier

# 2) Distance from home
boxplot(employee$DistanceFromHome)$out
quantile(employee$DistanceFromHome,seq(0,1,0.01)) # No Outlier

# 3) Monthly Income
boxplot(employee$MonthlyIncome)$out
quantile(employee$MonthlyIncome,seq(0,1,0.01))    # Outlier present
employee$MonthlyIncome[which(employee$MonthlyIncome > 163280.0)]<-163280.0

# 4) No of companies worked
boxplot(employee$NumCompaniesWorked)$out
quantile(employee$NumCompaniesWorked,seq(0,1,0.01)) # Outlier present
employee$NumCompaniesWorked[which(employee$NumCompaniesWorked > 8)]<-8

# 5) Percent Hike
boxplot(employee$PercentSalaryHike)$out # no outlier

# 6) TotalWorkingYears
boxplot(employee$TotalWorkingYears)$out
quantile(employee$TotalWorkingYears,seq(0,1,0.01)) # Outlier present
employee$TotalWorkingYears[which(employee$TotalWorkingYears > 28)]<-28

# 7) Training time last year
boxplot(employee$TrainingTimesLastYear)$out
quantile(employee$TrainingTimesLastYear,seq(0,1,0.01)) # Outlier present
employee$TrainingTimesLastYear[which(employee$TrainingTimesLastYear > 5)]<-5
employee$TrainingTimesLastYear[which(employee$TrainingTimesLastYear < 1)]<-1

# 8)YearsAtCompany
boxplot(employee$YearsAtCompany)$out
quantile(employee$YearsAtCompany,seq(0,1,0.01)) # Outlier present
employee$YearsAtCompany[which(employee$YearsAtCompany > 20)]<-20

# 9)Years since last promotion
boxplot(employee$YearsSinceLastPromotion)$out
quantile(employee$YearsSinceLastPromotion,seq(0,1,0.01)) # Outlier present
employee$YearsSinceLastPromotion[which(employee$YearsSinceLastPromotion > 7)]<-7


# 10)Years With CurrManager
boxplot(employee$YearsWithCurrManager)$out
quantile(employee$YearsWithCurrManager,seq(0,1,0.01)) # Outlier present
employee$YearsWithCurrManager[which(employee$YearsWithCurrManager > 14)]<-14



###############################################  Exploratory Data Analysis - Part - 2 ##########################################################################


# EDA

library(ggplot2)


# Plotting graphs for the categorical variables
labelling <- geom_text(stat="count", aes(label=..count..),position=position_stack(0.5))

ggplot(employee, aes(employee$Attrition, fill=Attrition))+geom_bar()+labelling
ggplot(employee, aes(employee$BusinessTravel, fill=BusinessTravel))+geom_bar()+labelling
ggplot(employee, aes(employee$Department, fill=Department))+geom_bar()+labelling
ggplot(employee, aes(employee$EducationField, fill=EducationField))+geom_bar()+labelling
ggplot(employee, aes(employee$Gender, fill=Gender))+geom_bar()+labelling
ggplot(employee, aes(employee$JobRole, fill=JobRole))+geom_bar()+labelling
ggplot(employee, aes(employee$MaritalStatus, fill=MaritalStatus))+geom_bar()+labelling


# Plotting graphs for the above categorical variables vs attrition
ggplot(employee, aes(x=employee$BusinessTravel, fill=Attrition))+geom_bar()+labelling
ggplot(employee, aes(employee$Department, fill=Attrition))+geom_bar()+labelling
ggplot(employee, aes(employee$EducationField, fill=Attrition))+geom_bar()+labelling
ggplot(employee, aes(employee$Gender, fill=Attrition))+geom_bar()+labelling
ggplot(employee, aes(employee$JobRole, fill=Attrition))+geom_bar()+labelling
ggplot(employee, aes(employee$MaritalStatus, fill=Attrition))+geom_bar()+labelling
ggplot(employee,aes(employee$EnvironmentSatisfaction, fill=Attrition))+geom_bar()+labelling
ggplot(employee, aes(employee$JobSatisfaction, fill=Attrition))+geom_bar()+labelling
ggplot(employee, aes(employee$WorkLifeBalance, fill=Attrition))+geom_bar()+labelling
ggplot(employee, aes(employee$Education, fill=Attrition))+geom_bar()+labelling
ggplot(employee, aes(employee$JobLevel, fill=Attrition))+geom_bar()+labelling
ggplot(employee, aes(employee$StockOptionLevel,fill=Attrition))+geom_bar()+labelling

# Plots for quantitative variables
ggplot(employee, aes(employee$Age, fill=Attrition))+geom_histogram(stat="count", position="dodge")
ggplot(employee, aes(employee$DistanceFromHome, fill=Attrition))+geom_histogram(stat="count")
ggplot(employee, aes(employee$MonthlyIncome,fill=Attrition))+geom_density()
ggplot(employee, aes(employee$PercentSalaryHike,fill=Attrition))+geom_histogram(stat = "count")
ggplot(employee, aes(employee$NumCompaniesWorked,fill=Attrition))+geom_histogram(stat = "count")
ggplot(employee, aes(employee$TotalWorkingYears,fill=Attrition))+geom_histogram(stat = "count")
ggplot(employee, aes(employee$TrainingTimesLastYear,fill=Attrition))+geom_histogram(stat = "count")
ggplot(employee, aes(employee$YearsAtCompany,fill=Attrition))+geom_histogram(stat = "count")
ggplot(employee, aes(employee$YearsSinceLastPromotion,fill=Attrition))+geom_histogram(stat = "count")
ggplot(employee, aes(employee$YearsWithCurrManager,fill=Attrition))+geom_histogram(stat = "count")



#Between two categorical variables
ggplot(employee, aes(employee$JobSatisfaction,fill=employee$WorkLifeBalance))+geom_bar()+labelling
ggplot(employee, aes(employee$BusinessTravel,fill=employee$WorkLifeBalance))+geom_bar()+labelling
ggplot(employee, aes(employee$Department,fill=employee$WorkLifeBalance))+geom_bar()+labelling
ggplot(employee, aes(employee$JobSatisfaction,fill=employee$WorkLifeBalance))+geom_bar()+labelling
ggplot(employee, aes(employee$EnvironmentSatisfaction,fill=employee$WorkLifeBalance))+geom_bar()+labelling

ggplot(employee, aes(employee$JobRole, fill=employee$JobSatisfaction))+geom_bar()+labelling
ggplot(employee, aes(employee$JobLevel, fill=employee$JobSatisfaction))+geom_bar()+labelling
ggplot(employee, aes(employee$MonthlyIncome, fill=employee$JobSatisfaction,na.rm=TRUE))+geom_density(na.rm = TRUE)


# Aggregated values of attrition per diffefrent variables
aggregate(employee$EmployeeID~employee$Attrition+employee$JobSatisfaction, FUN= length)
#attrition doesnt have any particular trend here

aggregate(employee$EmployeeID~employee$WorkLifeBalance+employee$JobSatisfaction, FUN=length)
#third highest number of people are having very low job satisfation and bad worklife balance


aggregate(employee$EmployeeID~employee$WorkLifeBalance+employee$JobSatisfaction+employee$Attrition, FUN=length)
# more attrtions happened when work life balance is better and job satisfaction is high

aggregate(employee$EmployeeID~employee$DistanceFromHome+employee$Attrition, FUN=length)
#Not really any trend

aggregate(employee$EmployeeID~employee$YearsSinceLastPromotion+employee$Attrition, FUN=length)
#more number of people are leaving during the same year immediatly after getting promoted.Second highest number after 1 year


# Adding all the quantitative variables to a new data frame for correlation matrix
Correlation_HRData <- data.frame(employee$Age,employee$DistanceFromHome,employee$MonthlyIncome,employee$PercentSalaryHike,
                                 employee$NumCompaniesWorked,employee$TotalWorkingYears,employee$TrainingTimesLastYear,
                                 employee$YearsAtCompany,employee$YearsSinceLastPromotion,employee$YearsWithCurrManager)
Correlation_HRData <- lapply(Correlation_HRData,as.numeric)
Correlation_HRData <- as.data.frame(Correlation_HRData)

install.packages("Hmisc")
library(Hmisc)
cormatrix <- rcorr(as.matrix(Correlation_HRData))
cormatrix$r

#Visualising the correlation matrix using corrplot
install.packages("corrplot")
library(corrplot)
corrplot(cormatrix$r, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
#From the above graph we can conclude that the correlation is high between
#1.LastPromotion and YearsatCompany 2.YearsatCompany and YearswithCurrentmanager
#3.Yearsatcompany and TotalWorkingYears 4.Age and totalworkingyears



############################################## DATA PREPRATION - employee dataframe ###########################################################################


#----------------convert factors with 2 levels to numerical variables ----------------------------#
# 1) Attrition

levels(employee$Attrition)<-c(0,1) # 0 as No , 1 as Yes
employee$Attrition<- as.numeric(levels(employee$Attrition))[employee$Attrition]

# 2) Gender

levels(employee$Gender)<-c(1,0) # 1 as Female , 0 as Male
employee$Gender<- as.numeric(levels(employee$Gender))[employee$Gender]

#---------------- create dummy Variables --------------------------------------------------------#

# 1) Business Travel

dummy_travel <- data.frame(model.matrix( ~BusinessTravel, data = employee))
#View(dummy_travel)
dummy_travel <- dummy_travel[,-1]

employee <- cbind(employee[,-4], dummy_travel)
colnames(employee)[c(25,26)]<-c("Travel_Frequently","Travel_Rarely")

# 2) Department

dummy_dep <- data.frame(model.matrix( ~Department, data = employee))
#View(dummy_dep)
dummy_dep <- dummy_dep[,-1]

employee <- cbind(employee[,-4], dummy_dep)
colnames(employee)[c(26,27)]<-c("R&D","Sales")

# 3)  Education

employee$Education<-case_when(
                             employee$Education==1 ~ "BelowCollege",
                             employee$Education==2 ~ "College",
                             employee$Education==3 ~ "Bachelor",
                             employee$Education==4 ~ "Master",
                             employee$Education==5 ~ "Doctor")

dummy_edu <- data.frame(model.matrix( ~Education, data = employee))
#View(dummy_edu)
dummy_edu <- dummy_edu[,-1]

employee <- cbind(employee[,-5], dummy_edu)
colnames(employee)[c(27,28,29,30)]<-c("Edu_BelowCollege","Edu_College","Edu_Doctor","Edu_Master")

# 4) Education Feild

dummy_edufield <- data.frame(model.matrix( ~EducationField, data = employee))
#View(dummy_edufield)
dummy_edufield <- dummy_edufield[,-1]

employee <- cbind(employee[,-5], dummy_edufield)
colnames(employee)[c(30,31,32,33,34)]<-c("EduField_LifeScience","EduField_Marketing","EduField_Medical","EduField_Other","EduField_Tech")

# 5) Job Role

dummy_jobrole <- data.frame(model.matrix( ~JobRole, data = employee))
#View(dummy_jobrole)
dummy_jobrole <- dummy_jobrole[,-1]

employee <- cbind(employee[,-7], dummy_jobrole)
colnames(employee)[c(34,35,36,37,38,39,40,41)]<-c("Role_HR","Role_LabTech","Role_Manager","Role_ManufDir","Role_ResearchDir","Role_ResearchSci","Role_SalesExec","Role_SalesRep")

# 6) MaritalStatus

dummy_Marital <- data.frame(model.matrix( ~MaritalStatus, data = employee))
#View(dummy_Marital)
dummy_Marital <- dummy_Marital[,-1]

employee <- cbind(employee[,-7], dummy_Marital)
colnames(employee)[c(41,42)]<-c("Married","Single")

# 7) Job Level

dummy_joblev <- data.frame(model.matrix( ~JobLevel, data = employee))
#View(dummy_joblev)
dummy_joblev <- dummy_joblev[,-1]

employee <- cbind(employee[,-6], dummy_joblev)

# 8) Stock option

dummy_stocklev <- data.frame(model.matrix( ~StockOptionLevel, data = employee))
#View(dummy_stocklev)
dummy_stocklev <- dummy_stocklev[,-1]

employee <- cbind(employee[,-9], dummy_stocklev)

# 9) Enviroment Satisfaction

employee$EnvironmentSatisfaction<-case_when(
  employee$EnvironmentSatisfaction==1 ~ "Low",
  employee$EnvironmentSatisfaction==2 ~ "Medium",
  employee$EnvironmentSatisfaction==3 ~ "High",
  employee$EnvironmentSatisfaction==4 ~ "VeryHigh")

dummy_env <- data.frame(model.matrix( ~EnvironmentSatisfaction, data = employee))
#View(dummy_env)
dummy_env <- dummy_env[,-1]

employee <- cbind(employee[,-14], dummy_env)
colnames(employee)[c(47,48,49)]<-c("EnvSat_Low","EnvSat_Medium","EnvSat_VeryHigh")


# 10) Job Satisfaction

employee$JobSatisfaction<-case_when(
  employee$JobSatisfaction==1 ~ "Low",
  employee$JobSatisfaction==2 ~ "Medium",
  employee$JobSatisfaction==3 ~ "High",
  employee$JobSatisfaction==4 ~ "VeryHigh")

dummy_jobsat <- data.frame(model.matrix( ~JobSatisfaction, data = employee))
#View(dummy_jobsat)
dummy_jobsat <- dummy_jobsat[,-1]

employee <- cbind(employee[,-14], dummy_jobsat)
colnames(employee)[c(49,50,51)]<-c("JobSat_Low","JobSat_Medium","JobSat_VeryHigh")


# 11) Work LifeBalance

employee$WorkLifeBalance<-case_when(
  employee$WorkLifeBalance==1 ~ "Bad",
  employee$WorkLifeBalance==2 ~ "Good",
  employee$WorkLifeBalance==3 ~ "Better",
  employee$WorkLifeBalance==4 ~ "Best")

dummy_work <- data.frame(model.matrix( ~WorkLifeBalance, data = employee))
#View(dummy_work)
dummy_work <- dummy_work[,-1]

employee <- cbind(employee[,-14], dummy_work)
colnames(employee)[c(51,52,53)]<-c("WorkLife_Best","WorkLife_Better","Worklife_Good")

# 12) Job Involvement

employee$JobInvolvement<-case_when(
  employee$JobInvolvement==1 ~ "Low",
  employee$JobInvolvement==2 ~ "Medium",
  employee$JobInvolvement==3 ~ "High",
  employee$JobInvolvement==4 ~ "VeryHigh")

dummy_jobinv <- data.frame(model.matrix( ~JobInvolvement, data = employee))
#View(dummy_jobinv)
dummy_jobinv <- dummy_jobinv[,-1]

employee <- cbind(employee[,-14], dummy_jobinv)
colnames(employee)[c(53,54,55)]<-c("JobInvol_Low","JobInvol_Medium","JobInvol_VeryHigh")

###############################################  Exploratory Data Analysis - Part - 3 ##########################################################################

skim(InTime)
skim(OutTime)

#Total 250 days  in/out time data of each employee
# Date timestamp values stored as char 
# 12 days with no in out records
#Each day has on an average 226 employees with no in out records
#Each employee has on an average 12 days with in out recoed


########################################--------------DATA CLEANING - InTime and Outtime --------####################################################################

#--------------- check difference in id count in two dataframes  ----------------#

setdiff(InTime$X , OutTime$X)      # same no of ids


#------------------------------- Missing Value Treatment ------------------------------------#


# 1)------------------------- Columns with all NA values ------------------------------------#

chk.function <- function(table) {
  
  index=sapply(table, 
               function(col)
               {
                 all(is.na(col), rm.na=TRUE)
               }
  )
  return (index)
}


index=chk.function(InTime)         #  12 Column with all NA values can be assumed to be as public holidays 
sum(index)
#Remove public holiday column 
InTime<-InTime[vapply(InTime, function(x) length(unique(x)) > 1, logical(1L))]


index=chk.function(OutTime)        #  12 Column with all NA values can be assumed to be as public holidays
sum(index)
#Remove public holiday column 
OutTime<-OutTime[vapply(OutTime, function(x) length(unique(x)) > 1, logical(1L))]


#2)--------------------------------   NA per Employee ---------------------------------------#

InTime$na_count <- apply(InTime, 1, function(x) sum(is.na(x)))
In_NA<-InTime[c("X","na_count")]

OutTime$na_count <- apply(OutTime, 1, function(x) sum(is.na(x)))
Out_NA<-OutTime[c("X","na_count")]

inout_NA_merge<-merge(In_NA,Out_NA,by.x = "X" , by.y = "X")
#View(inout_NA_merge)
summary(inout_NA_merge)

# On an average each employee has 12 days with no In-Out  
#it can be because of Leaves , Work from Home/client location or Business Travel
# Again there is no definite way to impute these missing records
# We will first create dummy variable , Avg working hours per employee , by taking weighted mean

#3)------------------------------------ NA per day ----------------------------------------------#

In_perday_NA<-sapply(InTime, function(y) sum(length(which(is.na(y))))) 
Out_perday_NA<-sapply(OutTime, function(y) sum(length(which(is.na(y))))) 
summary(In_perday_NA)
summary(Out_perday_NA)

#Again on an average each day has 226 employees with no In - Out Records
#it can be because of Leaves , Work from Home/client location or Business Travel
# As there is no definite way to impute these missing records


#------------------------------  De duplicate rows  ---------------------------------------------#

InTime<-unique(InTime)
OutTime<-unique(OutTime) 

#No duplicate found



##########################################------- DATA PREPRATION - IN OUT DATA -------###############################################################################


#--------------------------------- derived metrics :  Average working hours--------------------------------------------------------#

InTime[c(2:250)] <- apply(InTime[c(2:250)],2, function(x) as.POSIXlt(x,"%Y-%m-%d %H:%M:%S"))
InTime<-as.data.frame(InTime)


OutTime[c(2:250)] <- apply(OutTime[c(2:250)],2, function(x) as.POSIXlt(x,"%Y-%m-%d %H:%M:%S"))
OutTime<-as.data.frame(OutTime)

duration<-OutTime
duration[c(2:250)]<-OutTime[c(2:250)]-InTime[c(2:250)]

duration<-sapply(duration,function(x) as.numeric(x))
duration<-as.data.frame(duration)


duration$AvgHrs<-apply(duration[c(2:250)],1,weighted.mean,na.rm=TRUE)
duration$AvgHrs<-round(duration$AvgHrs,digits = 0)


duration[c(2:251)]<- NULL
colnames(duration)[1]<-"EmployeeID"

###################################### Final DF , merge duration with employee ###################################################

employee_Final<-join(employee,duration,type="left",match="all" )

# As employeeid is no more required , removing it from df

employee_Final$EmployeeID<- NULL

str(employee_Final)

##################################### Standardise data #########################################################################

employee_Final$Age<-scale(employee_Final$Age)
employee_Final$DistanceFromHome<-scale(employee_Final$DistanceFromHome)
employee_Final$MonthlyIncome<-scale(employee_Final$MonthlyIncome)
employee_Final$NumCompaniesWorked<-scale(employee_Final$NumCompaniesWorked)
employee_Final$PercentSalaryHike<-scale(employee_Final$PercentSalaryHike)
employee_Final$TotalWorkingYears<-scale(employee_Final$TotalWorkingYears)
employee_Final$TrainingTimesLastYear<-scale(employee_Final$TrainingTimesLastYear)
employee_Final$YearsAtCompany<-scale(employee_Final$YearsAtCompany)
employee_Final$YearsSinceLastPromotion<-scale(employee_Final$YearsSinceLastPromotion)
employee_Final$YearsWithCurrManager<-scale(employee$YearsWithCurrManager)



##################################### Check Corelation #########################################################################

Corelation<-round(cor(employee_Final),digits = 2)
melted_cormat <- melt(Corelation)

Positive_cor<-melted_cormat[Corelation > .60 & Corelation < 1.00,]
Positive_cor

#High positive corelation between
# TotalworkingYears and Age                       (.68)
# YearsAtCompany and TotalWorking years           (.62)
# Years at company and Years with current manager (.82)

Negative_cor<-melted_cormat[Corelation < -.60 & Corelation > -1.00,]
Negative_cor

#High Negative correlation
# Travel_Rarely and Travel Frequently              (-.75)
# Dept Sale and R&D                                (-.91)
# Single and Married                               (-.63)
# Worklife balance good and better                 (-.69)


################################# Seperate Tain and Test Data ###################################################################

set.seed(100)

indices = sample.split(employee_Final$Attrition, SplitRatio = 0.7)

train = employee_Final[indices,]

test = employee_Final[!(indices),]



################################## Model_1 #####################################################################################

model_1 = glm(Attrition ~ ., data = train, family = "binomial")
summary(model_1)

# AIC = 2127.2 , Null dev = 2665.7 , Residual dev=2017.2

#############################  Stepwise AIC ##################################################################################

model_2<- stepAIC(model_1, direction="both")
summary(model_2)



# VIF
VIF<-vif(model_2)


#Years at comapany has high VIF 4.429 and low p value .0956

############################  MODEL : 3 #########################################################################################

model_3<-glm(formula = Attrition ~ Age + Gender + NumCompaniesWorked + 
      TotalWorkingYears + TrainingTimesLastYear + 
      YearsSinceLastPromotion + YearsWithCurrManager + Travel_Frequently + 
      Travel_Rarely + `R&D` + Sales + Edu_College + EduField_Tech + 
      Role_ManufDir + Role_ResearchDir + Role_SalesExec + Single + 
      JobLevel2 + JobLevel5 + EnvSat_Low + EnvSat_VeryHigh + JobSat_Low + 
      JobSat_VeryHigh + WorkLife_Best + WorkLife_Better + Worklife_Good + 
      JobInvol_Low + JobInvol_Medium + JobInvol_VeryHigh + AvgHrs + 
      EduField_LifeScience, family = "binomial", data = train)

summary(model_3)

VIF3<-vif(model_3)

#EduField_Tech has very low significance p value = 0.136455 , 
# and it was same in previous model as well , so remove it

########################################## MODEL : 4 ####################################################################

model_4<-glm(formula = Attrition ~ Age + Gender + NumCompaniesWorked + 
      TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
      YearsWithCurrManager + Travel_Frequently + Travel_Rarely + 
      `R&D` + Sales + Edu_College + Role_ManufDir + 
      Role_ResearchDir + Role_SalesExec + Single + JobLevel2 + 
      JobLevel5 + EnvSat_Low + EnvSat_VeryHigh + JobSat_Low + JobSat_VeryHigh + 
      WorkLife_Best + WorkLife_Better + Worklife_Good + JobInvol_Low + 
      JobInvol_Medium + JobInvol_VeryHigh + AvgHrs + EduField_LifeScience, 
    family = "binomial", data = train)

summary(model_4)

VIF4<-vif(model_4)


# JobInvol_VeryHigh has  very high p value 0.126491

############################################## MODEL : 5 ####################################################

model_5<-glm(formula = Attrition ~ Age + Gender + NumCompaniesWorked + 
               TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
               YearsWithCurrManager + Travel_Frequently + Travel_Rarely + 
               `R&D` + Sales + Edu_College + Role_ManufDir + Role_ResearchDir + 
               Role_SalesExec + Single + JobLevel2 + JobLevel5 + EnvSat_Low + 
               EnvSat_VeryHigh + JobSat_Low + JobSat_VeryHigh + WorkLife_Best + 
               WorkLife_Better + Worklife_Good + JobInvol_Low + JobInvol_Medium
               + AvgHrs + EduField_LifeScience, family = "binomial", 
             data = train)

summary(model_5)

VIF5<-vif(model_5)

# JobInvol_Medium has very high p value 0.114474 , hence removing it

#################################### Model : 6 #################################################################

model_6<-glm(formula = Attrition ~ Age + Gender + NumCompaniesWorked + 
               TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
               YearsWithCurrManager + Travel_Frequently + Travel_Rarely + 
               `R&D` + Sales + Edu_College + Role_ManufDir + Role_ResearchDir + 
               Role_SalesExec + Single + JobLevel2 + JobLevel5 + EnvSat_Low + 
               EnvSat_VeryHigh + JobSat_Low + JobSat_VeryHigh + WorkLife_Best + 
               WorkLife_Better + Worklife_Good + JobInvol_Low +  
               AvgHrs + EduField_LifeScience, family = "binomial", data = train)

summary(model_6)


VIF6<-vif(model_6)

# JobLevel2 has very high p value 0.091735 , hence remove it

########################################## Model : 7 ##################################################

model_7 <- glm(formula = Attrition ~ Age + Gender + NumCompaniesWorked + 
                 TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
                 YearsWithCurrManager + Travel_Frequently + Travel_Rarely + 
                 `R&D` + Sales + Edu_College + Role_ManufDir + Role_ResearchDir + 
                 Role_SalesExec + Single + JobLevel5 + EnvSat_Low + 
                 EnvSat_VeryHigh + JobSat_Low + JobSat_VeryHigh + WorkLife_Best + 
                 WorkLife_Better + Worklife_Good + JobInvol_Low + AvgHrs + 
                 EduField_LifeScience, family = "binomial", data = train)

summary(model_7)

VIF7<-vif(model_7)

# Role_SalesExec has high p value 0.103305 , remove it

#################################### model: 8 ##############################################################

model_8<-glm(formula = Attrition ~ Age + Gender + NumCompaniesWorked + 
               TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
               YearsWithCurrManager + Travel_Frequently + Travel_Rarely + 
               `R&D` + Sales + Edu_College + Role_ManufDir + Role_ResearchDir 
                + Single + JobLevel5 + EnvSat_Low + EnvSat_VeryHigh + 
               JobSat_Low + JobSat_VeryHigh + WorkLife_Best + WorkLife_Better + 
               Worklife_Good + JobInvol_Low + AvgHrs + EduField_LifeScience, 
             family = "binomial", data = train)

summary(model_8)


VIF8<-vif(model_8)

# Edu_College has very high p value 0.072502

################################### Model: 9 #############################################################

model_9<-glm(formula = Attrition ~ Age + Gender + NumCompaniesWorked + 
               TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
               YearsWithCurrManager + Travel_Frequently + Travel_Rarely + 
               `R&D` + Sales  + Role_ManufDir + Role_ResearchDir 
             + Single + JobLevel5 + EnvSat_Low + EnvSat_VeryHigh + 
               JobSat_Low + JobSat_VeryHigh + WorkLife_Best + WorkLife_Better + 
               Worklife_Good + JobInvol_Low + AvgHrs + EduField_LifeScience, 
             family = "binomial", data = train)


summary(model_9)

VIF9<-vif(model_9)

# Travel_Rarely has p value = 0.001391 and high VIF

########################################## model : 10 #############################################################
model_10<-glm(formula = Attrition ~ Age + Gender + NumCompaniesWorked + 
               TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
               YearsWithCurrManager + Travel_Frequently +  
               `R&D` + Sales  + Role_ManufDir + Role_ResearchDir 
             + Single + JobLevel5 + EnvSat_Low + EnvSat_VeryHigh + 
               JobSat_Low + JobSat_VeryHigh + WorkLife_Best + WorkLife_Better + 
               Worklife_Good + JobInvol_Low + AvgHrs + EduField_LifeScience, 
             family = "binomial", data = train)

summary(model_10)

VIF10<-vif(model_10)

# JobLevel5 has p value : .049674

######################################## Model : 11 #############################################################

model_11<-glm(formula = Attrition ~ Age + Gender + NumCompaniesWorked + 
                TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
                YearsWithCurrManager + Travel_Frequently +  
                `R&D` + Sales  + Role_ManufDir + Role_ResearchDir 
                 + Single + EnvSat_Low + EnvSat_VeryHigh + 
                JobSat_Low + JobSat_VeryHigh + WorkLife_Best + WorkLife_Better + 
                Worklife_Good + JobInvol_Low + AvgHrs + EduField_LifeScience, 
              family = "binomial", data = train)

summary(model_11)

VIF<-vif(model_11)

#EduField_LifeScience has p value 0.052655

################################## Model : 12 #################################################################
model_12<-glm(formula = Attrition ~ Age + Gender + NumCompaniesWorked + 
                TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
                YearsWithCurrManager + Travel_Frequently +  
                `R&D` + Sales  + Role_ManufDir + Role_ResearchDir 
              + Single + EnvSat_Low + EnvSat_VeryHigh + 
                JobSat_Low + JobSat_VeryHigh + WorkLife_Best + WorkLife_Better + 
                Worklife_Good + JobInvol_Low + AvgHrs , 
              family = "binomial", data = train)

summary(model_12)

# Gender has p value 0.038635

############################## MODEL : 13 ######################################################################
model_13<-glm(formula = Attrition ~ Age  + NumCompaniesWorked + 
                TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
                YearsWithCurrManager + Travel_Frequently +  
                `R&D` + Sales  + Role_ManufDir + Role_ResearchDir 
              + Single + EnvSat_Low + EnvSat_VeryHigh + 
                JobSat_Low + JobSat_VeryHigh + WorkLife_Best + WorkLife_Better + 
                Worklife_Good + JobInvol_Low + AvgHrs , 
              family = "binomial", data = train)

summary(model_13)

#Worklife_Good has p value 0.039865

######################################## MODEL : 14 #############################################################
model_14<-glm(formula = Attrition ~ Age  + NumCompaniesWorked + 
                TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
                YearsWithCurrManager + Travel_Frequently +  
                `R&D` + Sales  + Role_ManufDir + Role_ResearchDir 
              + Single + EnvSat_Low + EnvSat_VeryHigh + 
                JobSat_Low + JobSat_VeryHigh + WorkLife_Best + WorkLife_Better
              + JobInvol_Low + AvgHrs , 
              family = "binomial", data = train)

summary(model_14)

VIF14<-vif(model_14)


# WorkLife_Best has p value 0.184281

################################## Model : 15 ######################################################################3

model_15<-glm(formula = Attrition ~ Age  + NumCompaniesWorked + 
                TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
                YearsWithCurrManager + Travel_Frequently +  
                `R&D` + Sales  + Role_ManufDir + Role_ResearchDir 
              + Single + EnvSat_Low + EnvSat_VeryHigh + 
                JobSat_Low + JobSat_VeryHigh + WorkLife_Better
              + JobInvol_Low + AvgHrs , 
              family = "binomial", data = train)

summary(model_15)

VIF15<-vif(model_15)

#JobInvol_Low had p value 0.054054

########################################### MODEL : 16 ########################################################

model_16<-glm(formula = Attrition ~ Age  + NumCompaniesWorked + 
                TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
                YearsWithCurrManager + Travel_Frequently +  
                `R&D` + Sales  + Role_ManufDir + Role_ResearchDir 
              + Single + EnvSat_Low + EnvSat_VeryHigh + 
                JobSat_Low + JobSat_VeryHigh + WorkLife_Better + AvgHrs , 
              family = "binomial", data = train)

summary(model_16)


VIF16<-vif(model_16)

# Role_ResearchDir has p vlaue 0.036126

######################################## MODEL : 17 ###############################################################

model_17<-glm(formula = Attrition ~ Age  + NumCompaniesWorked + 
                TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
                YearsWithCurrManager + Travel_Frequently +  
                `R&D` + Sales  + Role_ManufDir 
              + Single + EnvSat_Low + EnvSat_VeryHigh + 
                JobSat_Low + JobSat_VeryHigh + WorkLife_Better + AvgHrs , 
              family = "binomial", data = train)

summary(model_17)

VIF17<-vif(model_17)

#EnvSat_VeryHigh has p value 0.016804

############################# MODEL : 18 #############################################################################

model_18<-glm(formula = Attrition ~ Age  + NumCompaniesWorked + 
                TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
                YearsWithCurrManager + Travel_Frequently +  
                `R&D` + Sales  + Role_ManufDir 
              + Single + EnvSat_Low  + 
                JobSat_Low + JobSat_VeryHigh + WorkLife_Better + AvgHrs , 
              family = "binomial", data = train)

summary(model_18)

VIF18<-vif(model_18)

#JobSat_VeryHigh has p vlaue 0.002242

########################################## Model : 19 ####################################################################


model_19<-glm(formula = Attrition ~ Age  + NumCompaniesWorked + 
                TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
                YearsWithCurrManager + Travel_Frequently +  
                `R&D` + Sales  + Role_ManufDir 
              + Single + EnvSat_Low  + 
                JobSat_Low + WorkLife_Better + AvgHrs , 
              family = "binomial", data = train)

summary(model_19)


VIF19<-vif(model_19)

# JobSat_Low has p value 0.00147 

########################################### MODEL : 20 ###################################################################

model_20<-glm(formula = Attrition ~ Age  + NumCompaniesWorked + 
                TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
                YearsWithCurrManager + Travel_Frequently +  
                `R&D` + Sales  + Role_ManufDir 
              + Single + EnvSat_Low + WorkLife_Better + AvgHrs , 
              family = "binomial", data = train)

summary(model_20)


VIF20<-vif(model_20)

# WorkLife_Better has p value 0.001952

############################################### MODEL : 21 ######################################################################

model_21<-glm(formula = Attrition ~ Age  + NumCompaniesWorked + 
                TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
                YearsWithCurrManager + Travel_Frequently +  
                `R&D` + Sales  + Role_ManufDir 
              + Single + EnvSat_Low + AvgHrs , 
              family = "binomial", data = train)

summary(model_21)


VIF21<-vif(model_21)

# sales has VIF 4.212472 and p vlaue 0.000153

############################################### MODEL : 22 ####################################################################

model_22<-glm(formula = Attrition ~ Age  + NumCompaniesWorked + 
                TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion + 
                YearsWithCurrManager + Travel_Frequently +  
                `R&D`  + Role_ManufDir 
              + Single + EnvSat_Low + AvgHrs , 
              family = "binomial", data = train)

summary(model_22)


VIF22<-vif(model_22)

# `R&D` has p value 0.182168

############################################ Model : 23 ########################################################################

model_23<-glm(formula = Attrition ~ Age  + NumCompaniesWorked + 
                TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion  + Role_ManufDir 
              + Single + EnvSat_Low + AvgHrs , 
              family = "binomial", data = train)

summary(model_23)


VIF23<-vif(model_23)

# age has p value 0.002784
########################################## Model : 24 #########################################################################

model_24<-glm(formula = Attrition ~ NumCompaniesWorked + 
                TotalWorkingYears + TrainingTimesLastYear + YearsSinceLastPromotion  + Role_ManufDir 
              + Single + EnvSat_Low + AvgHrs , 
              family = "binomial", data = train)

summary(model_24)

VIF<-vif(model_24)
View(VIF)

#Now all vairalbes are significant with low p values, now we will evaluate the model

###################################### Model Evaluation #######################################################################

test_pred = predict(model_24, type = "response", 
                    newdata = test[,-1])

summary(test_pred)

test$prob <- test_pred


# probability cutoff :  50%.

test_pred_attr <- factor(ifelse(test_pred >= 0.50, "Yes", "No"))
test_actual_attr <- factor(ifelse(test$Attrition==1,"Yes","No"))


table(test_actual_attr,test_pred_attr)

#                  test_pred_attr
#test_actual_attr   No  Yes
#             No  1069   14
#             Yes  165   44


test_pred_attr <- factor(ifelse(test_pred >= 0.40, "Yes", "No"))

####################################### Confusion Matrix #################################################################

test_conf <- confusionMatrix(test_pred_attr, test_actual_attr, positive = "Yes")
test_conf

#Accuracy    : 0.846
#Sensitivity : 0.28230         
#Specificity : 0.95476 

####################################### optimal cuttoff #############################################################

#optimal probalility cutoff 

perform_fn <- function(cutoff) 
{
  predicted_attr <- factor(ifelse(test_pred >= cutoff, "Yes", "No"))
  conf <- confusionMatrix(predicted_attr, test_actual_attr, positive = "Yes")
  acc <- conf$overall[1]
  sens <- conf$byClass[1]
  spec <- conf$byClass[2]
  out <- t(as.matrix(c(sens, spec, acc))) 
  colnames(out) <- c("sensitivity", "specificity", "accuracy")
  return(out)
}


summary(test_pred)

s = seq(.01,.80,length=100)

OUT = matrix(0,100,3)


for(i in 1:100)
{
  OUT[i,] = perform_fn(s[i])
} 


cutoff <- s[which(abs(OUT[,1]-OUT[,2])<0.01)]


# Let's choose a cutoff value of 0.1616 for final model

test_cutoff_attr <- factor(ifelse(test_pred >=0.1616, "Yes", "No"))

conf_final <- confusionMatrix(test_cutoff_attr, test_actual_attr, positive = "Yes")

acc <- conf_final$overall[1]

sens <- conf_final$byClass[1]

spec <- conf_final$byClass[2]

acc 
#0.6857585

sens
#0.6794258

spec
#0.6869806

#View(test)

#####################################---KS -statistic - Test Data-----#############################################################
 

test_cutoff_attr <- ifelse(test_cutoff_attr=="Yes",1,0)
test_actual_attr <- ifelse(test_actual_attr=="Yes",1,0)


#on testing  data
pred_object_test<- prediction(test_cutoff_attr, test_actual_attr)

performance_measures_test<- performance(pred_object_test, "tpr", "fpr")

ks_table_test <- attr(performance_measures_test, "y.values")[[1]] - 
  (attr(performance_measures_test, "x.values")[[1]])

max(ks_table_test)
#0.3664064

###########################################--Lift & Gain Chart----#########################################


lift <- function(labels , predicted_prob,groups=10) {
  
  if(is.factor(labels)) labels  <- as.integer(as.character(labels ))
  if(is.factor(predicted_prob)) predicted_prob <- as.integer(as.character(predicted_prob))
  helper = data.frame(cbind(labels , predicted_prob))
  helper[,"bucket"] = ntile(-helper[,"predicted_prob"], groups)
  gaintable = helper %>% group_by(bucket)  %>%
    summarise_at(vars(labels ), funs(total = n(),
                                     totalresp=sum(., na.rm = TRUE))) %>%
    
    mutate(Cumresp = cumsum(totalresp),
           Gain=Cumresp/sum(totalresp)*100,
           Cumlift=Gain/(bucket*(100/groups))) 
  return(gaintable)
}

Churn_decile = lift(test_actual_attr, test_pred, groups = 10)

Churn_decile


############################### Final Model Description ##############################

# a) Final Model Variables and their co-efficients

#  NumCompaniesWorked       0.37690    
#  TotalWorkingYears       -0.85795    
#  TrainingTimesLastYear   -0.18317    
#  YearsSinceLastPromotion  0.21818    
#  Role_ManufDir           -0.70298    
#  Single                   0.91584    
#  EnvSat_Low               1.01185    
#  AvgHrs                   0.40849


# b) accuracy , specificity and sensitivity for .1616 cut off

#accuracy    - 0.6857585
#sensitivity - 0.6794258
#specificity - 0.6869806

# c) KS Statistics
#    0.3664064

# d) Gain and Lift

Churn_decile
